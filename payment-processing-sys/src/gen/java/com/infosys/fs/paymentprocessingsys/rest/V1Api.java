/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.infosys.fs.paymentprocessingsys.rest;

import com.infosys.fs.paymentprocessingsys.model.PaymentResponse;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-02-25T11:40:31.704+05:30")

@Api(value = "v1", description = "the v1 API")
@RequestMapping(value ="/sys/payment-process")
public interface V1Api {

    @ApiOperation(value = "API to Receive fraud check result from Fraud check system", nickname = "paymentProcessResponse", notes = "API receives the response from Fraud check System", tags={ "Payment Processing", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok"),
        @ApiResponse(code = 400, message = "Bad Request") })
    @RequestMapping(value = "/v1/fraud-check-response",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Object> paymentProcessResponse(@ApiParam(value = "Represents  Payment Response with the status for fraud check" ,required=true )  @Valid @RequestBody PaymentResponse paymentResponse);


    @ApiOperation(value = "API to Retrigger Fraud Check", nickname = "retryFraudCheck", notes = "API receives payment transaction id to retrigger the request", tags={ "Payment Processing", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok"),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 404, message = "Payment Id not found") })
    @RequestMapping(value = "/v1/retry-fraud-check",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Object> retryFraudCheck(@ApiParam(value = "Represents  payment id of the transaction to be retriggered. Only id needs to be sent to the API. other parameters will be ignored" ,required=true )  @Valid @RequestBody PaymentResponse paymentResponse);

}
