/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.infosys.fs.brokerservice.rest;

import com.infosys.fs.brokerservice.model.PaymentRequest;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-02-19T11:23:22.698+05:30")

@Api(value = "v1", description = "the v1 API")
@RequestMapping(value = "/sys/broker-service")
public interface V1Api {

    @ApiOperation(value = "API to Receieve Payment of the User to check for fraud check", nickname = "brokerServiceRequest", notes = "API receives validated paymentRequest and converts to FCS XML and sends to the Queue", tags={ "Broker Service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Accepted"),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/v1/fraud-check",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Object> brokerServiceRequest(@ApiParam(value = "Represents  Payment entity" ,required=true )  @Valid @RequestBody PaymentRequest payment) throws Exception;


    @ApiOperation(value = "API to retrieve fraud check status based on transaction id", nickname = "brokerServiceRequest", notes = "API receives validated paymentRequest and converts to FCS XML and sends to the Queue", tags={ "Broker Service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok"),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/v1/fraud-check-status",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Object> brokerServiceRequest(@NotNull @ApiParam(value = "Represents  transaction id for which status needs to be retrieved", required = true) @Valid @RequestParam(value = "id", required = true) Object id);

}
